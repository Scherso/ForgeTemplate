import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "gg.essential.loom" version "0.10.0.4"
    id "net.kyori.blossom" version "1.3.1"
    id "java"
}

version = projectVersion
group = projectGroup
archivesBaseName = projectName

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

loom {
    launchConfigs {
        client {}
    }

    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }

    forge {
        pack200Provider = new Pack200Adapter()
    }
}

blossom {
    replaceToken("@VERSION@", projectVersion)
    replaceToken("@NAME@", projectName)
    replaceToken("@ID@", projectId)
}

repositories {
    mavenCentral()
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
}

def mcVersion = "1.8.9"
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property("version", projectVersion)
    inputs.property("mcversion", mcVersion)
    inputs.property("name", projectName)
    inputs.property("id", projectId)

    filesMatching("mcmod.info") {
        expand(
                "id": projectId,
                "name": projectName,
                "version": projectVersion,
                "mcversion": mcVersion
        )
    }

    filesMatching("mixins.${projectId}.json") {
        expand(
                "id": projectId
        )
    }
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}

jar {
    dependsOn configurations.include
    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            "ForceLoadAsMod": true,
            'ModSide': 'CLIENT',
            "TweakOrder": "0"
            // "FMLCorePlugin": "",  For Class transformers in Forge Modding
            // 'FMLCorePluginContainsFMLMod': true
    )
}
