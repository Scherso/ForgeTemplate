import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "gg.essential.loom" version "0.10.0.3"
    id "net.kyori.blossom" version "1.3.0"
    id "java"
}

version = projectVersion
group = projectGroup
archivesBaseName = projectName

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

loom {
    launchConfigs {
        client {}
    }

    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }

    forge {
        pack200Provider = new Pack200Adapter()
        mixinConfig("mixins.${projectId}.json")
        mixin.defaultRefmapName.set("mixins.${projectId}.refmap.json")
    }
}

blossom {
    replaceToken("@VERSION@", projectVersion)
    replaceToken("@NAME@", projectName)
    replaceToken("@ID@", projectId)
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:1.12.2")
    mappings("de.oceanlabs.mcp:mcp_stable:39-1.12")
    forge("net.minecraftforge:forge:1.12.2-14.23.5.2768")
    // Mixin 
    include("org.spongepowered:mixin:${spongePoweredMixinVersion}")
    compileOnly("org.spongepowered:mixin:${spongePoweredMixinVersion}")
}

def mcVersion = "1.12.2"
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property("version", projectVersion)
    inputs.property("mcversion", mcVersion)
    inputs.property("name", projectName)
    inputs.property("id", projectId)

    filesMatching("mcmod.info") {
        expand(
                "id": projectId,
                "name": projectName,
                "version": projectVersion,
                "mcversion": mcVersion
        )
    }

    filesMatching("mixins.${projectId}.json") {
        expand(
                "id": projectId
        )
    }
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}

jar {
    dependsOn configurations.include
    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            'MixinConfigs': "mixins.${projectId}.json",
            "TweakOrder": "0"
    )
}
